 
from reactpy import component, html, hooks, run
from reactpy.backend.starlette import configure
from starlette.applications import Starlette
import json
import aiohttp
import asyncio
from datetime import datetime

# Main application component
@component
def Handler():
    # State for various application features
    current_tab, set_current_tab = hooks.use_state("builder")
    requests, set_requests = hooks.use_state([])
    collections, set_collections = hooks.use_state([])
    history, set_history = hooks.use_state([])
    search_term, set_search_term = hooks.use_state("")
    
    # Current request details
    method, set_method = hooks.use_state("GET")
    url, set_url = hooks.use_state("")
    headers, set_headers = hooks.use_state([{"key": "", "value": ""}])
    body, set_body = hooks.use_state("")
    response, set_response = hooks.use_state(None)
    
    # Filter history based on search term
    filtered_history = [
        h for h in history
        if search_term.lower() in h["url"].lower() or 
           search_term.lower() in h["method"].lower()
    ] if search_term else history

    # Function to add request to history
    def add_to_history(req_method, req_url, req_headers, req_body, resp):
        new_entry = {
            "id": len(history) + 1,
            "method": req_method,
            "url": req_url,
            "headers": req_headers,
            "body": req_body,
            "response": resp,
            "timestamp": datetime.now().isoformat()
        }
        set_history([new_entry] + history)
        return new_entry

    # Function to send API request
    async def send_request():
        try:
            async with aiohttp.ClientSession() as session:
                request_data = {
                    "method": method,
                    "url": url,
                    "headers": {h["key"]: h["value"] for h in headers if h["key"] and h["value"]},
                    "data": body if body and method in ["POST", "PUT", "PATCH"] else None
                }
                
                async with session.request(**request_data) as resp:
                    response_data = {
                        "status": resp.status,
                        "headers": dict(resp.headers),
                        "text": await resp.text(),
                        "url": str(resp.url)
                    }
                    set_response(response_data)
                    add_to_history(method, url, headers, body, response_data)
        except Exception as e:
            error_response = {"error": str(e)}
            set_response(error_response)
            add_to_history(method, url, headers, body, error_response)

    # Function to update header key-value pairs
    def update_header(index, field, value):
        new_headers = headers.copy()
        new_headers[index][field] = value
        set_headers(new_headers)

    # Function to add new header field
    def add_header():
        set_headers(headers + [{"key": "", "value": ""}])

    # Function to remove header field
    def remove_header(index):
        if len(headers) > 1:
            new_headers = headers.copy()
            new_headers.pop(index)
            set_headers(new_headers)

    # UI components with deep purple theme
    deep_purple_theme = {
        "primary": "#5E35B1",
        "primary_light": "#9575CD",
        "primary_dark": "#4527A0",
        "secondary": "#EDE7F6",
        "text_on_primary": "#FFFFFF",
        "text_on_secondary": "#212121",
        "background": "#F5F5F5",
        "card_bg": "#FFFFFF",
        "border": "#B39DDB"
    }

    # Style definitions
    styles = {
        "container": {
            "display": "flex",
            "flex_direction": "column",
            "height": "100vh",
            "font_family": "'Inter', sans-serif",
            "background_color": deep_purple_theme["background"]
        },
        "header": {
            "padding": "1rem",
            "background_color": deep_purple_theme["primary"],
            "color": deep_purple_theme["text_on_primary"],
            "display": "flex",
            "align_items": "center",
            "gap": "1rem"
        },
        "main": {
            "display": "flex",
            "flex_grow": 1,
            "overflow": "hidden"
        },
        "sidebar": {
            "width": "250px",
            "background_color": deep_purple_theme["primary_light"],
            "color": deep_purple_theme["text_on_primary"],
            "padding": "1rem",
            "overflow_y": "auto"
        },
        "content": {
            "flex_grow": 1,
            "padding": "1rem",
            "overflow_y": "auto",
            "background_color": deep_purple_theme["card_bg"]
        },
        "tab_container": {
            "display": "flex",
            "border_bottom": f"1px solid {deep_purple_theme['border']}",
            "margin_bottom": "1rem"
        },
        "tab": {
            "padding": "0.5rem 1rem",
            "cursor": "pointer",
            "border_bottom": "2px solid transparent"
        },
        "active_tab": {
            "padding": "0.5rem 1rem",
            "cursor": "pointer",
            "border_bottom": f"2px solid {deep_purple_theme['primary']}",
            "color": deep_purple_theme["primary"]
        },
        "input": {
            "padding": "0.5rem",
            "border": f"1px solid {deep_purple_theme['border']}",
            "border_radius": "4px",
            "margin_bottom": "0.5rem",
            "width": "100%"
        },
        "select": {
            "padding": "0.5rem",
            "border": f"1px solid {deep_purple_theme['border']}",
            "border_radius": "4px",
            "margin_right": "0.5rem"
        },
        "button": {
            "padding": "0.5rem 1rem",
            "background_color": deep_purple_theme["primary"],
            "color": deep_purple_theme["text_on_primary"],
            "border": "none",
            "border_radius": "4px",
            "cursor": "pointer"
        },
        "button_secondary": {
            "padding": "0.5rem 1rem",
            "background_color": deep_purple_theme["secondary"],
            "color": deep_purple_theme["text_on_secondary"],
            "border": f"1px solid {deep_purple_theme['border']}",
            "border_radius": "4px",
            "cursor": "pointer"
        },
        "request_builder": {
            "background_color": deep_purple_theme["card_bg"],
            "padding": "1rem",
            "border_radius": "4px",
            "box_shadow": "0 2px 4px rgba(0,0,0,0.1)"
        },
        "response_container": {
            "margin_top": "1rem",
            "padding": "1rem",
            "background_color": deep_purple_theme["card_bg"],
            "border_radius": "4px",
            "box_shadow": "0 2px 4px rgba(0,0,0,0.1)",
            "max_height": "400px",
            "overflow_y": "auto"
        },
        "history_item": {
            "padding": "0.5rem",
            "border_bottom": f"1px solid {deep_purple_theme['border']}",
            "cursor": "pointer"
        }
    }

    # Tab navigation
    tabs = [
        {"id": "builder", "label": "Request Builder"},
        {"id": "collections", "label": "Collections"},
        {"id": "history", "label": "History"}
    ]

    # Request method options
    methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"]

    # Build the UI
    return html.div({"style": styles["container"]},
        # Header
        html.header({"style": styles["header"]},
            html.h2({"style": {"margin": "0"}}, "Handler API Client"),
            html.span({"style": {"font_size": "0.9rem", "opacity": "0.8"}}, 
                     "Deep Purple Edition")
        ),
        
        # Main content area
        html.div({"style": styles["main"]},
            # Sidebar
            html.div({"style": styles["sidebar"]},
                html.h3("Workspace"),
                html.ul(
                    html.li("Collections"),
                    html.li("Environments"),
                    html.li("History")
                )
            ),
            
            # Content area
            html.div({"style": styles["content"]},
                # Tab navigation
                html.div({"style": styles["tab_container"]},
                    [html.span({
                        "key": tab["id"],
                        "style": styles["active_tab"] if current_tab == tab["id"] else styles["tab"],
                        "on_click": lambda event, t=tab["id"]: set_current_tab(t)
                    }, tab["label"]) for tab in tabs]
                ),
                
                # Request Builder Tab
                current_tab == "builder" and html.div(
                    html.div({"style": styles["request_builder"]},
                        # Method and URL section
                        html.div({"style": {"display": "flex", "margin_bottom": "1rem"}},
                            html.select({
                                "value": method,
                                "on_change": lambda event: set_method(event["target"]["value"]),
                                "style": styles["select"]
                            }, [html.option({"value": m}, m) for m in methods]),
                            html.input({
                                "type": "text",
                                "placeholder": "Enter request URL",
                                "value": url,
                                "on_change": lambda event: set_url(event["target"]["value"]),
                                "style": {**styles["input"], "margin_bottom": "0"}
                            })
                        ),
                        
                        # Headers section
                        html.div({"style": {"margin_bottom": "1rem"}},
                            html.h4("Headers"),
                            [html.div({"key": f"header-{i}", "style": {"display": "flex", "margin_bottom": "0.5rem"}},
                                html.input({
                                    "type": "text",
                                    "placeholder": "Key",
                                    "value": header["key"],
                                    "on_change": lambda event, idx=i: update_header(idx, "key", event["target"]["value"]),
                                    "style": {**styles["input"], "margin_right": "0.5rem", "margin_bottom": "0"}
                                }),
                                html.input({
                                    "type": "text",
                                    "placeholder": "Value",
                                    "value": header["value"],
                                    "on_change": lambda event, idx=i: update_header(idx, "value", event["target"]["value"]),
                                    "style": {**styles["input"], "margin_right": "0.5rem", "margin_bottom": "0"}
                                }),
                                html.button({
                                    "on_click": lambda event, idx=i: remove_header(idx),
                                    "style": {**styles["button_secondary"], "margin_bottom": "0"}
                                }, "Remove")
                            ) for i, header in enumerate(headers)],
                            html.button({
                                "on_click": lambda event: add_header(),
                                "style": styles["button_secondary"]
                            }, "Add Header")
                        ),
                        
                        # Body section
                        html.div({"style": {"margin_bottom": "1rem"}},
                            html.h4("Body"),
                            html.textarea({
                                "placeholder": "Request body (JSON, text, etc.)",
                                "value": body,
                                "on_change": lambda event: set_body(event["target"]["value"]),
                                "style": {**styles["input"], "height": "100px"}
                            })
                        ),
                        
                        # Send button
                        html.button({
                            "on_click": lambda event: asyncio.ensure_future(send_request()),
                            "style": styles["button"]
                        }, "Send Request")
                    ),
                    
                    # Response section
                    response and html.div({"style": styles["response_container"]},
                        html.h4("Response"),
                        html.pre(
                            json.dumps(response, indent=2) if isinstance(response, dict) else str(response)
                        )
                    )
                ),
                
                # History Tab
                current_tab == "history" and html.div(
                    html.div(
                        html.h3("Request History"),
                        html.input({
                            "type": "text",
                            "placeholder": "Search history...",
                            "value": search_term,
                            "on_change": lambda event: set_search_term(event["target"]["value"]),
                            "style": styles["input"]
                        }),
                        html.div(
                            [html.div({
                                "key": f"history-{item['id']}",
                                "style": styles["history_item"],
                                "on_click": lambda event, h=item: (
                                    set_method(h["method"]),
                                    set_url(h["url"]),
                                    set_headers(h["headers"]),
                                    set_body(h["body"]),
                                    set_response(h["response"]),
                                    set_current_tab("builder")
                                )
                            },
                                html.span({"style": {"font_weight": "bold", "margin_right": "0.5rem"}}, 
                                         item["method"]),
                                html.span(item["url"]),
                                html.br(),
                                html.span({"style": {"font_size": "0.8rem", "color": "#666"}}, 
                                         item["timestamp"][:10])
                            ) for item in filtered_history]
                        )
                    )
                ),
                
                # Collections Tab
                current_tab == "collections" and html.div(
                    html.h3("Collections"),
                    html.p("Create and manage your API collections"),
                    html.button({
                        "style": styles["button"]
                    }, "New Collection")
                )
            )
        )
    )

# Configure and run the application
app = Starlette()
configure(app, Handler)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)